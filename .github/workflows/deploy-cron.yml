name: Deploy API Container

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      PROJECT_DIR: apps/senpy-ai-news-report
      IMAGE_NAME: senpy-ai-news-report

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push container image
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          REPO_SLUG: ${{ github.repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -euo pipefail

          IMAGE_NAME_VALUE="${IMAGE_NAME}"
          IMAGE_TAG_VALUE="${IMAGE_TAG}"
          REPO_OWNER_VALUE=$(printf '%s' "${REPO_SLUG}" | cut -d'/' -f1)
          OWNER_LOWER=$(printf '%s' "${REPO_OWNER_VALUE}" | tr '[:upper:]' '[:lower:]')

          IMAGE_REPO="ghcr.io/${OWNER_LOWER}/${IMAGE_NAME_VALUE}"
          IMAGE_SHA="${IMAGE_REPO}:${IMAGE_TAG_VALUE}"
          IMAGE_LATEST="${IMAGE_REPO}:latest"

          echo "Debug (build): IMAGE_NAME=${IMAGE_NAME_VALUE}"
          echo "Debug (build): IMAGE_TAG=${IMAGE_TAG_VALUE}"
          echo "Debug (build): REPO_OWNER=${REPO_OWNER_VALUE}"
          echo "Debug (build): IMAGE_REPO=${IMAGE_REPO}"

          docker build -f Dockerfile.cron -t "${IMAGE_SHA}" .
          docker tag "${IMAGE_SHA}" "${IMAGE_LATEST}"
          docker push "${IMAGE_SHA}"
          docker push "${IMAGE_LATEST}"

      - name: Deploy API on remote host
        uses: appleboy/ssh-action@v1.0.3
        env:
          GHCR_USERNAME: ${{ github.actor }}
          GHCR_TOKEN: ${{ github.token }}
          API_HOST_PORT: ${{ secrets.API_HOST_PORT }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          API_TOKEN: ${{ secrets.API_AUTH_TOKEN }}
        with:
          host: ${{ secrets.CRON_DEPLOY_HOST }}
          username: ${{ secrets.CRON_DEPLOY_USER }}
          key: ${{ secrets.CRON_DEPLOY_SSH_KEY }}
          envs: API_TOKEN,GHCR_USERNAME,GHCR_TOKEN,API_HOST_PORT,BOT_TOKEN,OPENAI_API_KEY,TELEGRAM_API_HASH,TELEGRAM_API_ID,TELEGRAM_BOT_TOKEN,TELEGRAM_CHANNEL_ID

          script: |
            set -euo pipefail

            IMAGE_NAME="senpy-ai-news-report"
            IMAGE_TAG="${{ github.sha }}"
            REPO_SLUG="${{ github.repository }}"
            REPO_OWNER=$(printf '%s' "${REPO_SLUG}" | cut -d'/' -f1)
            OWNER_LOWER=$(printf '%s' "${REPO_OWNER}" | tr '[:upper:]' '[:lower:]')
            IMAGE_REPO="ghcr.io/${OWNER_LOWER}/${IMAGE_NAME}"
            IMAGE_REF="${IMAGE_REPO}:${IMAGE_TAG}"
            API_PORT="${API_HOST_PORT:-8000}"

            if ! command -v docker >/dev/null 2>&1; then
              echo 'Docker binary not found on remote host.' >&2
              exit 1
            fi


            if ! docker pull "${IMAGE_REF}"; then
              echo "Falling back to latest image tag" >&2
              if ! docker pull "${IMAGE_REPO}:latest"; then
                echo 'Unable to pull image from GHCR.' >&2
                exit 1
              fi
              IMAGE_REF="${IMAGE_REPO}:latest"
            fi

            docker rm -f api >/dev/null 2>&1 || true

            TARGET_DIR="${{ secrets.CRON_DEPLOY_PATH }}"
            mkdir -p "${TARGET_DIR}"
            ENV_ARGS=()

            # pass secrets explicitly with -e
            ENV_ARGS+=(-e "BOT_TOKEN=${BOT_TOKEN}")
            ENV_ARGS+=(-e "OPENAI_API_KEY=${OPENAI_API_KEY}")
            ENV_ARGS+=(-e "TELEGRAM_API_HASH=${TELEGRAM_API_HASH}")
            ENV_ARGS+=(-e "TELEGRAM_API_ID=${TELEGRAM_API_ID}")
            ENV_ARGS+=(-e "TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}")
            ENV_ARGS+=(-e "TELEGRAM_CHANNEL_ID=${TELEGRAM_CHANNEL_ID}")
            ENV_ARGS+-(-e "API_AUTH_TOKEN=${API_AUTH_TOKEN}")

            docker run -d \
              --name api \
              --restart unless-stopped \
              "${ENV_ARGS[@]}" \
              -p "${API_PORT}:8000" \
              "${IMAGE_REF}" \
              poetry run uvicorn senpy_ai_news_report.main:app --host 0.0.0.0 --port 8000

            echo 'Debug (deploy): Container started. Environment variables inside container:'
