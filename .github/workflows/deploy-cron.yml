name: Deploy Cron & API Stack

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_DIR: apps/senpy-ai-news-report
  IMAGE_TAG: ${{ github.sha }}
  IMAGE_REPO: ghcr.io/${{ toLower(github.repository_owner) }}/senpy-ai-news-report

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push container images
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -euo pipefail
          IMAGE_SHA="${IMAGE_REPO}:${IMAGE_TAG}"
          IMAGE_LATEST="${IMAGE_REPO}:latest"

          docker build -f Dockerfile.cron -t "${IMAGE_SHA}" .
          docker tag "${IMAGE_SHA}"
          docker push "${IMAGE_SHA}"

      - name: Daeploy API server
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_REPO: ${{ env.IMAGE_REPO }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          API_HOST_PORT: ${{ secrets.API_HOST_PORT }}
        with:
          host: ${{ secrets.CRON_DEPLOY_HOST }}
          username: ${{ secrets.CRON_DEPLOY_USER }}
          key: ${{ secrets.CRON_DEPLOY_SSH_KEY }}
          script: |
            set -euo pipefail

            TARGET_DIR="${{ secrets.CRON_DEPLOY_PATH }}"
            ENV_FILE="$TARGET_DIR/.env"

            if [ -n "${GHCR_USERNAME:-}" ] && [ -n "${GHCR_TOKEN:-}" ]; then
              echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
            else
              echo 'Warning: GHCR credentials not provided; attempting to pull using existing auth context.' >&2
            fi

            IMAGE_REF="$IMAGE_REPO:$IMAGE_TAG"
            if ! docker pull "$IMAGE_REF"; then
              echo "Falling back to latest image tag" >&2
              docker pull "$IMAGE_REPO:latest"
              IMAGE_REF="$IMAGE_REPO:latest"
            fi

            for svc in cron-github cron-feeds api; do
              docker rm -f "$svc" >/dev/null 2>&1 || true
            done

            if [ ! -f "$ENV_FILE" ]; then
              echo 'Warning: .env file not found on remote host; containers may fail to start.' >&2
            fi

            RUN_ENV_ARGS=""
            if [ -f "$ENV_FILE" ]; then
              RUN_ENV_ARGS="--env-file $ENV_FILE"
            fi

            # docker run -d \
            #   --name cron-github \
            #   --restart unless-stopped \
            #   $RUN_ENV_ARGS \
            #   "$IMAGE_REF" \
            #   poetry run python -m crons.github_trends_cron
            #
            # docker run -d \
            #   --name cron-feeds \
            #   --restart unless-stopped \
            #   $RUN_ENV_ARGS \
            #   "$IMAGE_REF" \
            #   poetry run python -m crons.feeds_cron

            API_PORT="$API_HOST_PORT"
            if [ -z "$API_PORT" ]; then
              API_PORT=8000
            fi

            docker run -d \
              --name api \
              --restart unless-stopped \
              $RUN_ENV_ARGS \
              -p "${API_PORT}:8000" \
              "$IMAGE_REF" \
              poetry run uvicorn senpy_ai_news_report.main:app --host 0.0.0.0 --port 8000
