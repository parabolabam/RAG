name: Deploy API Container

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      PROJECT_DIR: apps/senpy-ai-news-report
      IMAGE_NAME: senpy-ai-news-report
      REPO_OWNER: ${{ github.repository_owner }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push container image
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          REPO_OWNER: ${{ env.REPO_OWNER }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          set -euo pipefail

          IMAGE_NAME_VALUE="${IMAGE_NAME}"
          REPO_OWNER_VALUE="${REPO_OWNER:-${GITHUB_REPOSITORY%%/*}}"
          IMAGE_TAG_VALUE="${IMAGE_TAG}"

          OWNER_LOWER=$(printf '%s' "${REPO_OWNER_VALUE}" | tr '[:upper:]' '[:lower:]')
          IMAGE_REPO="ghcr.io/${OWNER_LOWER}/${IMAGE_NAME_VALUE}"
          IMAGE_SHA="${IMAGE_REPO}:${IMAGE_TAG_VALUE}"
          IMAGE_LATEST="${IMAGE_REPO}:latest"

          docker build -f Dockerfile.cron -t "${IMAGE_SHA}" .
          docker tag "${IMAGE_SHA}" "${IMAGE_LATEST}"
          docker push "${IMAGE_SHA}"
          docker push "${IMAGE_LATEST}"

      - name: Deploy API on remote host
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          REPO_OWNER: ${{ env.REPO_OWNER }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          API_HOST_PORT: ${{ secrets.API_HOST_PORT }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
        with:
          host: ${{ secrets.CRON_DEPLOY_HOST }}
          username: ${{ secrets.CRON_DEPLOY_USER }}
          key: ${{ secrets.CRON_DEPLOY_SSH_KEY }}
          script: |
            set -euo pipefail

            if ! command -v docker >/dev/null 2>&1; then
              echo 'Docker binary not found on remote host.' >&2
              exit 1
            fi

            IMAGE_NAME_VALUE="${IMAGE_NAME:-senpy-ai-news-report}"
            IMAGE_TAG_VALUE="${IMAGE_TAG:-latest}"
            REPO_OWNER_VALUE="${REPO_OWNER:-}"
            if [ -z "${REPO_OWNER_VALUE}" ] && [ -n "${GITHUB_REPOSITORY:-}" ]; then
              REPO_OWNER_VALUE="${GITHUB_REPOSITORY%%/*}"
            fi

            if [ -z "${REPO_OWNER_VALUE}" ]; then
              echo 'Repo owner missing from environment.' >&2
              exit 1
            fi

            OWNER_LOWER=$(printf '%s' "${REPO_OWNER_VALUE}" | tr '[:upper:]' '[:lower:]')
            IMAGE_REPO_VALUE="ghcr.io/${OWNER_LOWER}/${IMAGE_NAME_VALUE}"
            IMAGE_REF="${IMAGE_REPO_VALUE}:${IMAGE_TAG_VALUE}"

            if [ -n "${GHCR_USERNAME:-}" ] && [ -n "${GHCR_TOKEN:-}" ]; then
              echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USERNAME}" --password-stdin
            else
              echo 'Warning: GHCR credentials not provided; attempting to pull using existing auth context.' >&2
            fi

            if ! docker pull "${IMAGE_REF}"; then
              echo "Falling back to latest image tag" >&2
              if ! docker pull "${IMAGE_REPO_VALUE}:latest"; then
                echo 'Unable to pull image from GHCR.' >&2
                exit 1
              fi
              IMAGE_REF="${IMAGE_REPO_VALUE}:latest"
            fi

            docker rm -f api >/dev/null 2>&1 || true

            TARGET_DIR="${{ secrets.CRON_DEPLOY_PATH }}"
            mkdir -p "${TARGET_DIR}"
            ENV_FILE="${TARGET_DIR}/.env"

            if [ ! -f "${ENV_FILE}" ]; then
              echo 'Warning: .env file not found on remote host; api container may miss configuration.' >&2
            fi

            TMP_ENV_FILE=""
            cleanup_tmp_env() {
              if [ -n "${TMP_ENV_FILE}" ] && [ -f "${TMP_ENV_FILE}" ]; then
                rm -f "${TMP_ENV_FILE}"
              fi
            }
            trap cleanup_tmp_env EXIT

            if [ -n "${BOT_TOKEN:-}" ] || [ -n "${OPENAI_API_KEY:-}" ] || [ -n "${TELEGRAM_API_HASH:-}" ] || [ -n "${TELEGRAM_API_ID:-}" ] || [ -n "${TELEGRAM_BOT_TOKEN:-}" ] || [ -n "${TELEGRAM_CHANNEL_ID:-}" ]; then
              TMP_ENV_FILE="${TARGET_DIR}/.runtime.env"
              rm -f "${TMP_ENV_FILE}"
              touch "${TMP_ENV_FILE}"
              chmod 600 "${TMP_ENV_FILE}"

              write_secret() {
                local KEY="$1"
                local VALUE="$2"
                if [ -n "${VALUE}" ]; then
                  printf '%s=%s\n' "${KEY}" "${VALUE}" >> "${TMP_ENV_FILE}"
                fi
              }

              write_secret BOT_TOKEN "${BOT_TOKEN:-}"
              write_secret OPENAI_API_KEY "${OPENAI_API_KEY:-}"
              write_secret TELEGRAM_API_HASH "${TELEGRAM_API_HASH:-}"
              write_secret TELEGRAM_API_ID "${TELEGRAM_API_ID:-}"
              write_secret TELEGRAM_BOT_TOKEN "${TELEGRAM_BOT_TOKEN:-}"
              write_secret TELEGRAM_CHANNEL_ID "${TELEGRAM_CHANNEL_ID:-}"
            fi

            ENV_ARGS=()
            if [ -f "${ENV_FILE}" ]; then
              ENV_ARGS+=(--env-file "${ENV_FILE}")
            fi
            if [ -n "${TMP_ENV_FILE}" ] && [ -s "${TMP_ENV_FILE}" ]; then
              ENV_ARGS+=(--env-file "${TMP_ENV_FILE}")
            fi

            API_PORT="${API_HOST_PORT:-8000}"

            docker run -d \
              --name api \
              --restart unless-stopped \
              "${ENV_ARGS[@]}" \
              -p "${API_PORT}:8000" \
              "${IMAGE_REF}" \
              poetry run uvicorn senpy_ai_news_report.main:app --host 0.0.0.0 --port 8000
